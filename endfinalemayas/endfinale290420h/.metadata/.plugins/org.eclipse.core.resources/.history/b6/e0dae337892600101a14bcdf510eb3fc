import Principale.State;           // ⚠️ on importe l’énum de ta simulation
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import Input_output.Lampe;

public class LED extends AbstractComponent {
    private State state = State.FALSE;  // état visuel de la LED

    public LED(String id, int x, int y) {
        super("LED", 1, 1);             // 1 entrée, 0 sortie
        setBounds(x, y, 40, 40);
        // On instancie la partie logique (ton Lampe)
        Lampe lampelogique = new Lampe(id, x, y);
        setComposant(lampelogique);
    }

    /** 
     * Appelée automatiquement par Circuit.simulate après composant.evaluate()
     */
    @Override
    public void updateOutputState() {
        // 1) On lit l'état de l'entrée (ou UNKNOWN si pas de connexion)
        State in = getInputStates().isEmpty()
                   ? State.UNKNOWN
                   : getInputStates().get(0);

        // 2) Si TRUE → LED allumée, sinon éteinte
        this.state = (in == State.TRUE) ? State.TRUE : State.FALSE;

        // 3) On peut aussi informer la partie logique si nécessaire
        ((Lampe)getComposant()).addInput(in);

        // 4) Déclencher le repaint pour redessiner le cercle
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        // Cercle rouge si TRUE, gris sinon
        g2.setColor(state == State.TRUE ? Color.RED : Color.GRAY);
        g2.fillOval(5, 5, getWidth() - 10, getHeight() - 10);
        // Contour noir
        g2.setColor(Color.BLACK);
        g2.drawOval(5, 5, getWidth() - 10, getHeight() - 10);
    }
}
