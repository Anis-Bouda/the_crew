import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.CubicCurve2D;
import java.awt.geom.QuadCurve2D;
import javax.swing.JPanel;

public class OR extends AbstractComponent {
    private final int width = 50;
    private final int height = 60;

    public OR() {
        super("OR", 2, 1); // 2 entrées, 1 sortie
        setOpaque(false); // Rendre le fond transparent

        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                java.awt.Point clickPoint = e.getPoint();
                clickPoint.translate(getX(), getY()); // ✅ Convertir en coordonnées globales

                for (java.awt.Point port : getInputPorts()) {
                    if (port.distance(clickPoint) < 10) {
                        System.out.println("✅ Port d'entrée OR sélectionné !");
                    }
                }
                for (java.awt.Point port : getOutputPorts()) {
                    if (port.distance(clickPoint) < 10) {
                        System.out.println("✅ Port de sortie OR sélectionné !");
                    }
                }
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // Rendre l'arrière-plan transparent
        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));

        g2.setStroke(new BasicStroke(2));
        g2.setColor(Color.BLACK);

        // Dessiner la porte OR
        int x = 10, y = 0;
        int w = width, h = height;
        
        // Courbes
        g2.draw(new CubicCurve2D.Double(x, y, x + 0.7 * w, y, x + w, y + 0.3 * h, x + w, y + h / 2));
        g2.draw(new CubicCurve2D.Double(x + w, y + h / 2, x + w, y + 0.7 * h, x + 0.7 * w, y + h, x, y + h));
        g2.draw(new QuadCurve2D.Double(x, y + h, x + 0.2 * w, y + h / 2, x, y));
        
        // Entrées
        g2.drawLine(x - 20, y + 15, x, y + 15);
        g2.drawLine(x - 20, y + 45, x, y + 45);
        
        // Sortie
        g2.drawLine(x + w, y + h / 2, x + w + 40, y + h / 2);
    }
}
