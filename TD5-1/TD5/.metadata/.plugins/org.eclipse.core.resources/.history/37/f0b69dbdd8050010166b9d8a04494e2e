import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractComponent extends JPanel {
    protected List<java.awt.Point> inputPorts = new ArrayList<>();
    protected List<java.awt.Point> outputPorts = new ArrayList<>();
    protected List<java.awt.Point> Ports = new ArrayList<>();
    protected String componentName;
    protected int numInputs;
    protected int numOutputs;
    private java.awt.Point firstSelectedPort = null;
    private java.awt.Point secondSelectedPort = null;

    public AbstractComponent(String componentName, int numInputs, int numOutputs) {
        this.componentName = componentName;
        this.numInputs = numInputs;
        this.numOutputs = numOutputs;
        
        setPreferredSize(new Dimension(100, 60));
        setOpaque(false); // ✅ Rendre le fond transparent
        setBorder(BorderFactory.createLineBorder(Color.BLACK));
        setLayout(null);

        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                handlePortSelection(e.getPoint());
            }
        });

        // ✅ Met à jour les ports après l'affichage
        SwingUtilities.invokeLater(this::updatePortPositions);
    }

    private void handlePortSelection(java.awt.Point clickPoint) {
        // Convertir en coordonnées globales
        java.awt.Point globalClick = new java.awt.Point(getX() + clickPoint.x, getY() + clickPoint.y);

        for (java.awt.Point port : Ports) {
            if (port.distance(globalClick) < 10) { // Si on clique proche d'un port
                if (firstSelectedPort == null) {
                    firstSelectedPort = port;
                    System.out.println("✅ Premier port sélectionné !");
                } else if (secondSelectedPort == null) {
                    secondSelectedPort = port;
                    System.out.println("✅ Deuxième port sélectionné !");
                    repaint(); // Redessiner pour afficher la ligne
                }
                return;
            }
        }
    }

    protected void updatePortPositions() {
        int width = getPreferredSize().width;
        int height = getPreferredSize().height;

        inputPorts.clear();
        outputPorts.clear();
        Ports.clear(); // ✅ Ne pas oublier de vider la liste avant de la remplir

        // Placement des ports d'entrée (gauche)
        for (int i = 0; i < numInputs; i++) {
            int yPos = (i + 1) * height / (numInputs + 1);
            java.awt.Point p = new java.awt.Point(0, yPos);
            inputPorts.add(p);
            Ports.add(p);
        }

        // Placement des ports de sortie (droite)
        for (int i = 0; i < numOutputs; i++) {
            int yPos = (i + 1) * height / (numOutputs + 1);
            java.awt.Point p = new java.awt.Point(width, yPos);
            outputPorts.add(p);
            Ports.add(p);
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        updatePortPositions();

        g.setColor(Color.BLACK);
        g.drawRect(0, 0, getWidth(), getHeight());

        // Dessiner les ports d'entrée
        g.setColor(Color.RED);
        for (java.awt.Point p : inputPorts) {
            g.fillOval(p.x - 5, p.y - 5, 10, 10);
        }

        // Dessiner les ports de sortie
        g.setColor(Color.GREEN);
        for (java.awt.Point p : outputPorts) {
            g.fillOval(p.x - 5, p.y - 5, 10, 10);
        }

        // Dessiner la ligne si deux ports sont sélectionnés
        if (firstSelectedPort != null && secondSelectedPort != null) {
            g.setColor(Color.BLUE);
            g.drawLine(firstSelectedPort.x, firstSelectedPort.y, secondSelectedPort.x, secondSelectedPort.y);
        }
    }
}
