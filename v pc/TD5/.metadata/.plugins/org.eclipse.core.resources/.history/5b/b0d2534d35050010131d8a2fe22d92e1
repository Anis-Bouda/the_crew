import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractComponent extends JPanel {
    // On force l'utilisation de java.awt.Point pour éviter les conflits avec votre classe custom
    protected List<java.awt.Point> inputPorts = new ArrayList<>();
    protected List<java.awt.Point> outputPorts = new ArrayList<>();

    protected String componentName;

    public AbstractComponent(String componentName) {
        this.componentName = componentName;
        // Par défaut, on définit une taille (modifiable par les sous-classes)
        setPreferredSize(new Dimension(100, 60));
        setBackground(Color.WHITE);
        setBorder(BorderFactory.createLineBorder(Color.BLACK));
        setLayout(null);
    }

    public String getComponentName() {
        return componentName;
    }

    /**
     * Méthode à appeler pour mettre à jour les positions des ports sur les bords du composant.
     * Par exemple, on place les ports d'entrée sur le bord gauche et les ports de sortie sur le bord droit.
     */
    protected void updatePortPositions() {
        int width = getWidth();
        int height = getHeight();

        int numInputs = inputPorts.size();
        int numOutputs = outputPorts.size();

        // Si aucun port n'est défini, ne rien faire
        if (numInputs > 0) {
            // Positionner les ports d'entrée uniformément sur le bord gauche
            for (int i = 0; i < numInputs; i++) {
                // Calcul de la position verticale pour chaque port
                int y = (i + 1) * height / (numInputs + 1);
                // Le point est sur le bord gauche (x=0)
                inputPorts.set(i, new java.awt.Point(0, y));
            }
        }

        if (numOutputs > 0) {
            // Positionner les ports de sortie uniformément sur le bord droit
            for (int i = 0; i < numOutputs; i++) {
                int y = (i + 1) * height / (numOutputs + 1);
                // Le point est sur le bord droit (x = width)
                outputPorts.set(i, new java.awt.Point(width, y));
            }
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        // Avant de dessiner, mettre à jour la position des ports
        updatePortPositions();
        
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.BLUE);
        // Dessiner les entrées
        for (java.awt.Point p : inputPorts) {
            g2d.fillOval(p.x - 5, p.y - 5, 10, 10);
        }
        // Dessiner les sorties
        for (java.awt.Point p : outputPorts) {
            g2d.fillOval(p.x - 5, p.y - 5, 10, 10);
        }
    }
}
