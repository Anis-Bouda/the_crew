import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JPanel;

public abstract class AbstractComponent extends JPanel {
    protected List<java.awt.Point> inputPorts = new ArrayList<>();
    protected List<java.awt.Point> outputPorts = new ArrayList<>();
    
    protected String componentName;
    protected int numInputs;
    protected int numOutputs;

    public AbstractComponent(String componentName, int numInputs, int numOutputs) {
        this.componentName = componentName;
        this.numInputs = numInputs;
        this.numOutputs = numOutputs;
        
        setPreferredSize(new Dimension(100, 60));
   
        setBorder(BorderFactory.createLineBorder(Color.BLACK));
        setLayout(null);

        // ✅ Appeler updatePortPositions() immédiatement après la création
        updatePortPositions();
    }

    public String getComponentName() {
        return componentName;
    }

    /**
     * Met à jour la position des ports en fonction de la taille du composant.
     */
    protected void updatePortPositions() {
        int width = getPreferredSize().width; // ✅ Utiliser getPreferredSize() car getWidth() est 0 au début
        int height = getPreferredSize().height;

        inputPorts.clear();
        outputPorts.clear();

        // Placement des ports d'entrée (gauche)
        for (int i = 0; i < numInputs; i++) {
            int yPos = (i + 1) * height / (numInputs + 1);
            inputPorts.add(new java.awt.Point(0, yPos));
        }

        // Placement des ports de sortie (droite)
        for (int i = 0; i < numOutputs; i++) {
            int yPos = (i + 1) * height / (numOutputs + 1);
            outputPorts.add(new java.awt.Point(width, yPos));
        }
    }
    this.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent e) {
            // Vérifier les ports d'entrée
            for (int i = 0; i < inputPorts.size(); i++) {
                java.awt.Point port = inputPorts.get(i);
                // distance en coordonnées locales
                if (port.distance(e.getPoint()) < 10) {
                    // Calculer la position globale du port
                    java.awt.Point globalPort = new java.awt.Point(getX() + port.x, getY() + port.y);
                    ConnectionManager.portClicked(AbstractComponent.this, "input", i, globalPort);
                    return;
                }
            }
            // Vérifier les ports de sortie
            for (int i = 0; i < outputPorts.size(); i++) {
                java.awt.Point port = outputPorts.get(i);
                if (port.distance(e.getPoint()) < 10) {
                    java.awt.Point globalPort = new java.awt.Point(getX() + port.x, getY() + port.y);
                    ConnectionManager.portClicked(AbstractComponent.this, "output", i, globalPort);
                    return;
                }
            }
        }
    });


    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // ✅ Assurer que les ports sont bien recalculés avant l'affichage
        updatePortPositions();

        g.setColor(Color.BLACK);
        g.drawRect(0, 0, getWidth(), getHeight());

        // Dessiner les ports d'entrée
        g.setColor(Color.RED);
        for (java.awt.Point p : inputPorts) {
            g.fillOval(p.x - 5, p.y - 5, 10, 10);
        }

        // Dessiner les ports de sortie
        g.setColor(Color.GREEN);
        for (java.awt.Point p : outputPorts) {
            g.fillOval(p.x - 5, p.y - 5, 10, 10);
        }
    }

    public List<java.awt.Point> getInputPorts() {
        List<java.awt.Point> globalPositions = new ArrayList<>();
        for (java.awt.Point p : inputPorts) {
            globalPositions.add(new java.awt.Point(getX() + p.x, getY() + p.y));
        }
        return globalPositions;
    }

    public List<java.awt.Point> getOutputPorts() {
        List<java.awt.Point> globalPositions = new ArrayList<>();
        for (java.awt.Point p : outputPorts) {
            globalPositions.add(new java.awt.Point(getX() + p.x, getY() + p.y));
        }
        return globalPositions;
    }
}
