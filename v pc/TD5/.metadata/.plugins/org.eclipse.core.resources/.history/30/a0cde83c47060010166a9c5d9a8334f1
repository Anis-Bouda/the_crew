import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

public class Ligne extends JPanel {
    // Stocke toutes les lignes dessinées (libres ou connexions)
    private List<LineSegment> segments = new ArrayList<>();
    // Ligne en cours de dessin (pour le mode libre)
    private LineSegment currentSegment;
    private boolean drawing = false;

    public Ligne() {
        setBackground(Color.WHITE);

        // Gestion du dessin libre avec la souris
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // Démarrage du dessin libre (si aucune opération de connexion n'est en cours)
                if (!drawing) {
                    currentSegment = new LineSegment(e.getPoint(), e.getPoint(), false);
                    drawing = true;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (drawing && currentSegment != null) {
                    currentSegment.end = e.getPoint();
                    segments.add(currentSegment);
                    currentSegment = null;
                    drawing = false;
                    repaint();
                    System.out.println("Ligne libre créée !");
                }
            }
        });

        addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                if (drawing && currentSegment != null) {
                    currentSegment.end = e.getPoint();
                    repaint();
                }
            }
        });
    }

    /**
     * Ajoute une ligne de connexion avec coude.
     * La ligne est ajoutée à la liste des segments et reste affichée.
     * Après l'ajout, l'utilisateur peut reprendre le dessin libre.
     *
     * @param start Le point de départ de la connexion (global)
     * @param end Le point d'arrivée de la connexion (global)
     */
    public void setConnection(Point start, Point end) {
        segments.add(new LineSegment(start, end, true));
        // Réinitialisation de l'état libre afin que l'utilisateur puisse dessiner de nouvelles lignes
        currentSegment = null;
        drawing = false;
        repaint();
        System.out.println("Connexion créée !");
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.BLUE);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setStroke(new BasicStroke(3));

        // Dessin de toutes les lignes sauvegardées
        for (LineSegment seg : segments) {
            if (seg.isConnection && seg.start.x != seg.end.x && seg.start.y != seg.end.y) {
                // Dessin en coude : horizontal puis vertical
                g.drawLine(seg.start.x, seg.start.y, seg.end.x, seg.start.y);
                g.drawLine(seg.end.x, seg.start.y, seg.end.x, seg.end.y);
            } else {
                g.drawLine(seg.start.x, seg.start.y, seg.end.x, seg.end.y);
            }
        }

        // Dessin de la ligne en cours (mode libre)
        if (currentSegment != null) {
            if (currentSegment.isConnection && currentSegment.start.x != currentSegment.end.x && currentSegment.start.y != currentSegment.end.y) {
                g.drawLine(currentSegment.start.x, currentSegment.start.y, currentSegment.end.x, currentSegment.start.y);
                g.drawLine(currentSegment.end.x, currentSegment.start.y, currentSegment.end.x, currentSegment.end.y);
            } else {
                g.drawLine(currentSegment.start.x, currentSegment.start.y, currentSegment.end.x, currentSegment.end.y);
            }
        }
    }

    // Classe interne pour représenter une ligne (segment)
    private static class LineSegment {
        Point start;
        Point end;
        // isConnection = true pour une ligne de connexion (qui doit être dessinée avec coude)
        boolean isConnection;

        public LineSegment(Point start, Point end, boolean isConnection) {
            this.start = start;
            this.end = end;
            this.isConnection = isConnection;
        }
    }
}
