import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class Ligne extends JPanel {
    // Stocke toutes les lignes dessinées (libres ou connexions)
    private List<LineSegment> segments = new ArrayList<>();
    // Segment en cours de dessin (mode libre)
    private LineSegment currentSegment;
    private boolean drawing = false;
    // Seuil de proximité pour la suppression (en pixels)
    private final double DELETE_THRESHOLD = 5.0;

    public Ligne() {
        setBackground(Color.WHITE);

        // Gestion du clic pour dessin libre et suppression
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // Si clic droit, tenter de supprimer un segment
                if (SwingUtilities.isRightMouseButton(e)) {
                    // Parcourir les segments pour détecter si le clic est proche d'une ligne
                    for (int i = segments.size() - 1; i >= 0; i--) {
                        LineSegment seg = segments.get(i);
                        if (isPointNearSegment(e.getPoint(), seg)) {
                            segments.remove(i);
                            repaint();
                            System.out.println("Segment supprimé !");
                            return;
                        }
                    }
                } else {
                    // Clic gauche : début du dessin libre si aucun dessin n'est en cours
                    if (!drawing) {
                        currentSegment = new LineSegment(e.getPoint(), e.getPoint(), false);
                        drawing = true;
                    }
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                // Clic gauche : finaliser le dessin libre
                if (!SwingUtilities.isRightMouseButton(e) && drawing && currentSegment != null) {
                    currentSegment.end = e.getPoint();
                    segments.add(currentSegment);
                    currentSegment = null;
                    drawing = false;
                    repaint();
                    System.out.println("Ligne libre créée !");
                }
            }
        });

        addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                // Mise à jour en temps réel de la ligne en cours
                if (drawing && currentSegment != null) {
                    currentSegment.end = e.getPoint();
                    repaint();
                }
            }
        });
    }

    /**
     * Ajoute une ligne de connexion avec coude.
     * La ligne est ajoutée à la liste des segments et reste affichée.
     * Après l'ajout, l'utilisateur peut reprendre le dessin libre.
     *
     * @param start Le point de départ de la connexion (global)
     * @param end Le point d'arrivée de la connexion (global)
     */
    public void setConnection(Point start, Point end) {
        segments.add(new LineSegment(start, end, true));
        // Réinitialisation de l'état libre pour permettre la reprise du dessin
        currentSegment = null;
        drawing = false;
        repaint();
        System.out.println("Connexion créée !");
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.BLUE);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setStroke(new BasicStroke(3));

        // Dessiner tous les segments sauvegardés
        for (LineSegment seg : segments) {
            drawSegment(g, seg);
        }

        // Dessiner le segment en cours (mode libre)
        if (currentSegment != null) {
            drawSegment(g, currentSegment);
        }
    }

    /**
     * Dessine un segment. Si le segment n'est pas aligné horizontalement ou verticalement,
     * on dessine un coude (horizontal puis vertical).
     */
    private void drawSegment(Graphics g, LineSegment seg) {
        if (seg.start.x != seg.end.x && seg.start.y != seg.end.y) {
            // Coude : horizontal de start à (end.x, start.y) puis vertical jusqu'à end
            g.drawLine(seg.start.x, seg.start.y, seg.end.x, seg.start.y);
            g.drawLine(seg.end.x, seg.start.y, seg.end.x, seg.end.y);
        } else {
            g.drawLine(seg.start.x, seg.start.y, seg.end.x, seg.end.y);
        }
    }

    /**
     * Vérifie si le point p est à proximité du segment (coude ou droit).
     */
    private boolean isPointNearSegment(Point p, LineSegment seg) {
        // Si le segment est dessiné en coude, on vérifie les deux parties
        if (seg.start.x != seg.end.x && seg.start.y != seg.end.y) {
            Point corner = new Point(seg.end.x, seg.start.y);
            return isPointNearLine(p, seg.start, corner, DELETE_THRESHOLD)
                    || isPointNearLine(p, corner, seg.end, DELETE_THRESHOLD);
        } else {
            return isPointNearLine(p, seg.start, seg.end, DELETE_THRESHOLD);
        }
    }

    /**
     * Retourne true si le point p est à une distance inférieure au seuil threshold de la droite formée par a et b.
     */
    private boolean isPointNearLine(Point p, Point a, Point b, double threshold) {
        double distance = ptSegDist(a.x, a.y, b.x, b.y, p.x, p.y);
        return distance <= threshold;
    }

    /**
     * Calcule la distance entre un point (px,py) et le segment défini par (x1,y1) et (x2,y2).
     * Implémentation basée sur la formule standard.
     */
    private double ptSegDist(double x1, double y1, double x2, double y2, double px, double py) {
        double dx = x2 - x1;
        double dy = y2 - y1;
        if (dx == 0 && dy == 0) {
            // Le segment est un point
            dx = px - x1;
            dy = py - y1;
            return Math.sqrt(dx * dx + dy * dy);
        }
        double t = ((px - x1) * dx + (py - y1) * dy) / (dx * dx + dy * dy);
        if (t < 0) {
            dx = px - x1;
            dy = py - y1;
        } else if (t > 1) {
            dx = px - x2;
            dy = py - y2;
        } else {
            double projX = x1 + t * dx;
            double projY = y1 + t * dy;
            dx = px - projX;
            dy = py - projY;
        }
        return Math.sqrt(dx * dx + dy * dy);
    }

    // Classe interne pour représenter un segment de ligne
    private static class LineSegment {
        Point start;
        Point end;
        // isConnection vaut true pour une ligne de connexion (mais la logique de dessin en coude s'applique à tous)
        boolean isConnection;

        public LineSegment(Point start, Point end, boolean isConnection) {
            this.start = start;
            this.end = end;
            this.isConnection = isConnection;
        }
    }
}
