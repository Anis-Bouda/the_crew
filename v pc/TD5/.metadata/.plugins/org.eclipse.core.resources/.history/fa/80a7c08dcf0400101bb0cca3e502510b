import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.net.URL;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

public class ComposantPanel extends JPanel {

    public ComposantPanel() {
        setLayout(new BorderLayout());

        // üîπ Cr√©ation du n≈ìud racine
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Composants");

        // üîπ Cr√©ation des cat√©gories
        DefaultMutableTreeNode Gates = new DefaultMutableTreeNode("Gates");
        DefaultMutableTreeNode Perxers = new DefaultMutableTreeNode("Perxers");
        DefaultMutableTreeNode Memory = new DefaultMutableTreeNode("Memory");
        DefaultMutableTreeNode Arithmetic = new DefaultMutableTreeNode("Arithmetic");
        DefaultMutableTreeNode Wirray = new DefaultMutableTreeNode("Wirray");

        // üîπ Ajout des cat√©gories au n≈ìud racine
        root.add(Gates);
        root.add(Perxers);
        root.add(Memory);
        root.add(Arithmetic);
        root.add(Wirray);

        // üîπ Ajout des sous-composants
        Gates.add(new DefaultMutableTreeNode("NOT"));
        Gates.add(new DefaultMutableTreeNode("OR"));
        Gates.add(new DefaultMutableTreeNode("AND"));
        Gates.add(new DefaultMutableTreeNode("BUFFER"));
        Gates.add(new DefaultMutableTreeNode("NOR"));
        Gates.add(new DefaultMutableTreeNode("XOR"));
        Gates.add(new DefaultMutableTreeNode("XNOR"));
        Gates.add(new DefaultMutableTreeNode("NAND"));
        Gates.add(new DefaultMutableTreeNode("ODD PARITY"));
        Gates.add(new DefaultMutableTreeNode("EVEN PARITY"));

        Perxers.add(new DefaultMutableTreeNode("Multiplexer"));
        Perxers.add(new DefaultMutableTreeNode("Demultiplexer"));
        Perxers.add(new DefaultMutableTreeNode("Decoder"));
        Perxers.add(new DefaultMutableTreeNode("Priority Encoder"));
        Perxers.add(new DefaultMutableTreeNode("Bit Selector"));

        Memory.add(new DefaultMutableTreeNode("D flip flop"));
        Memory.add(new DefaultMutableTreeNode("T flip flop"));
        Memory.add(new DefaultMutableTreeNode("JK flip flop"));
        Memory.add(new DefaultMutableTreeNode("RS flip flop"));
        Memory.add(new DefaultMutableTreeNode("Register"));
        Memory.add(new DefaultMutableTreeNode("Counter"));
        Memory.add(new DefaultMutableTreeNode("RAM"));
        Memory.add(new DefaultMutableTreeNode("ROM"));

        Arithmetic.add(new DefaultMutableTreeNode("Adder"));
        Arithmetic.add(new DefaultMutableTreeNode("Subtractor"));
        Arithmetic.add(new DefaultMutableTreeNode("Multiplier"));
        Arithmetic.add(new DefaultMutableTreeNode("Shifter"));
        Arithmetic.add(new DefaultMutableTreeNode("Bit Adder"));
        Arithmetic.add(new DefaultMutableTreeNode("Bit Finder"));
        Arithmetic.add(new DefaultMutableTreeNode("Comparator"));
        Arithmetic.add(new DefaultMutableTreeNode("Divider"));
        Arithmetic.add(new DefaultMutableTreeNode("Negator"));

        Wirray.add(new DefaultMutableTreeNode("Bin"));
        Wirray.add(new DefaultMutableTreeNode("Probe"));
        Wirray.add(new DefaultMutableTreeNode("Tunnel"));
        Wirray.add(new DefaultMutableTreeNode("Clock"));
        Wirray.add(new DefaultMutableTreeNode("Bus Register"));

        // üîπ Cr√©ation de l'arbre JTree
        JTree tree = new JTree(new DefaultTreeModel(root));
        tree.setCellRenderer(new ComposantTreeCellRenderer());

        // üîπ Ajout du d√©filement
        JScrollPane scrollPane = new JScrollPane(tree);
        scrollPane.setPreferredSize(new Dimension(300, 250));

        // üîπ Ajout de l'arbre au panneau
        add(scrollPane, BorderLayout.CENTER);
    }

    // üîπ Classe interne pour personnaliser l'affichage des ic√¥nes
    static class ComposantTreeCellRenderer extends DefaultTreeCellRenderer {

        private Icon resizeIcon(String path, int width, int height) {
            URL resource = getClass().getResource(path);
            if (resource == null) {
                System.err.println("‚ö†Ô∏è Image not found: " + path);
                return new ImageIcon(); // Retourne une ic√¥ne vide pour √©viter les erreurs
            }

            ImageIcon originalIcon = new ImageIcon(resource);
            Image resizedImage = originalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
            return new ImageIcon(resizedImage);
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected,
                                                      boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);

            DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
            String nodeName = node.getUserObject().toString();

            // üîπ Assignation des ic√¥nes
            switch (nodeName) {
                case "Gates":
                case "Perxers":
                case "Memory":
                case "Arithmetic":
                case "Wirray":
                    setIcon(resizeIcon("icons2/category.png", 54, 54));
                    break;

                case "OR":
                    setIcon(resizeIcon("icons2/or.png", 54, 54));
                    break;
                case "BUFFER":
                    setIcon(resizeIcon("icons2/buffer.png", 54, 54));
                    break;
                case "AND":
                    setIcon(resizeIcon("icons2/and.png", 54, 54));
                    break;
                case "NOT":
                    setIcon(resizeIcon("icons2/not.png", 54, 54));
                    break;
                case "NOR":
                    setIcon(resizeIcon("icons2/nor.png", 54, 54));
                    break;
                case "XOR":
                    setIcon(resizeIcon("icons2/xor.png", 54, 54));
                    break;
                case "NAND":
                    setIcon(resizeIcon("icons2/nand.png", 54, 54));
                    break;
                case "XNOR":
                    setIcon(resizeIcon("icons2/xnor.png", 54, 54));
                    break;
                case "ODD PARITY":
                case "EVEN PARITY":
                    setIcon(resizeIcon("icons2/parity.png", 54, 54));
                    break;
                case "RAM":
                    setIcon(resizeIcon("icons2/Capture_d_eÃÅcran_2025-03-19_aÃÄ_12.48.20-removebg-preview.png", 54, 54));
                    break;
                case "ROM":
                    setIcon(resizeIcon("icons2/ROM.png", 54, 54));
                    break;
                case "Multiplexer":
                    setIcon(resizeIcon("icons2/multiplixeur.png", 54, 54));
                    break;
                case "Demultiplexer":
                    setIcon(resizeIcon("icons2/demultiplixeur.png", 54, 54));
                    break;
                case "Priority Encoder":
                    setIcon(resizeIcon("icons2/bit.jpg", 54, 54));
                    break;
                    
                    
                case "D flip flop":
                    setIcon(resizeIcon("icons2/D.png", 54, 54));
                    break;
                case "T flip flop":
                    setIcon(resizeIcon("icons2/T.png", 54, 54));
                    break;
                case "JK flip flop":
                    setIcon(resizeIcon("icons2/JK.png", 54, 54));
                    break;
                case "RS flip flop":
                    setIcon(resizeIcon("icons2/RS.png", 54, 54));
                    break;
                case "Decoder":
                    setIcon(resizeIcon("icons2/decoder.png", 54, 54));
                    break;
                case "Adder":
                    setIcon(resizeIcon("icons2/adder.png", 54, 54));
                    break;
                case "Subtractor":
                    setIcon(resizeIcon("icons2/subtractor.png", 54, 54));
                    break;
                case "Multiplier":
                    setIcon(resizeIcon("icons2/multiplier.png", 54, 54));
                    break;
                default:
                    setIcon(resizeIcon("icons2/not.png", 54, 54)); // Ic√¥ne par d√©faut
                    break;
            }

            return this;
        }
    }
}
