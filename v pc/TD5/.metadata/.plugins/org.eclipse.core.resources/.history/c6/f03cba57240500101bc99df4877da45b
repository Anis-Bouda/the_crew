import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JPanel;

public class Square extends JPanel {

    private static final int SQUARE_SIZE = 50;  // Taille du carré
    private int mouseX, mouseY;               // Pour calculer le décalage lors du drag
    private boolean dragging = false;         // Indique si le carré est en cours de déplacement

    public Square() {
        // Définir les propriétés du panneau
        setBackground(Color.WHITE);             // Fond blanc
        setPreferredSize(new Dimension(64, 64));  // On peut utiliser 64x64 pour bien voir le carré

        // Ajout des écouteurs de souris pour gérer le déplacement
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // Démarrage du déplacement : enregistrer la position de la souris dans le composant
                dragging = true;
                mouseX = e.getX();
                mouseY = e.getY();
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                dragging = false;
            }
        });

        addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                if (dragging) {
                    // Calcul du déplacement
                    int dx = e.getX() - mouseX;
                    int dy = e.getY() - mouseY;
                    // Mise à jour de la position absolue du composant dans son parent
                    java.awt.Point current = getLocation();
                    setLocation(current.x + dx, current.y + dy);
                    // Pour refléter le changement visuel, on demande un repaint
                    getParent().revalidate();
                    getParent().repaint();
                }
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // Redessiner le composant
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.RED);  // Bordure rouge
        // Centrage du carré à l'intérieur du panneau
        int squareX = (getWidth() - SQUARE_SIZE) / 2;
        int squareY = (getHeight() - SQUARE_SIZE) / 2;
        g2d.drawRect(squareX, squareY, SQUARE_SIZE, SQUARE_SIZE);
    }
}
