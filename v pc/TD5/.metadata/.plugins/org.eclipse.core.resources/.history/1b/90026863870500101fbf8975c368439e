import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;

// Note : Ne pas importer java.awt.Point ici pour √©viter le conflit avec votre classe custom Point

public class MainLayout extends JPanel {
    private PropertiesPanel propertiesPanel;
    // Modification : utiliser Map<Object, java.awt.Point> pour pouvoir stocker Square (qui n'est pas un JLabel)
    private Map<Object, java.awt.Point> composantsMap; 

    public MainLayout() {
        // Set layout to BorderLayout (√©quivalent √† BorderPane en JavaFX)
        setLayout(new BorderLayout());

        // üîπ Liste des composants support√©s (Placeholder Panel)
        JPanel composants = new JPanel();
        composants.add(new JLabel("Composants ici")); // Ajout d'un label pour √©viter qu'il soit vide
        
        composantsMap = new HashMap<>();
        
        // üîπ Panneau de contr√¥le avec boutons "Run", "Stop", "Fil"
        JPanel control = new JPanel();
        control.add(new JButton("Run"));
        control.add(new JButton("Stop"));
        control.add(new JButton("Fil"));

        // üîπ Zone pour afficher les propri√©t√©s des composants
        propertiesPanel = new PropertiesPanel();
        propertiesPanel.setBorder(BorderFactory.createTitledBorder("Propri√©t√©s"));

        // üîπ Cr√©ation du panneau lat√©ral gauche (VBox en JavaFX ‚Üí BoxLayout en Swing)
        JPanel simulationControl = new JPanel();
        simulationControl.setLayout(new BoxLayout(simulationControl, BoxLayout.Y_AXIS));
        simulationControl.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        simulationControl.add(control);
        simulationControl.add(new ComposantPanel()); // ‚úÖ Replace old composants with hierarchical list
        simulationControl.add(propertiesPanel);
        add(simulationControl, BorderLayout.WEST);

        // üîπ Zone de conception des circuits (Placeholder)
        JLayeredPane circuitDesignArea = new JLayeredPane();
        circuitDesignArea.setLayout(null);
        circuitDesignArea.setPreferredSize(new Dimension(1500, 1000));
        circuitDesignArea.setBackground(Color.LIGHT_GRAY);
        add(circuitDesignArea, BorderLayout.CENTER);
        
        // Utilisation de votre classe custom Point pour l'affichage du fond
        Point pointPanel = new Point();  // Ici, "Point" est votre classe qui √©tend JPanel et dessine la grille
        pointPanel.setOnMoveListener(newPosition -> {
            // Mise √† jour des propri√©t√©s
            propertiesPanel.updateProperties(newPosition.x, newPosition.y, "Carr√© Rouge");

            // Mise √† jour de la HashMap
            composantsMap.put(pointPanel, newPosition);
        });

        pointPanel.setOpaque(false);
        pointPanel.setBounds(0, 0, circuitDesignArea.getPreferredSize().width, circuitDesignArea.getPreferredSize().height);
        circuitDesignArea.add(pointPanel, Integer.valueOf(0));
       
        circuitDesignArea.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // Lorsque la taille de circuitDesignArea change, mettre √† jour la taille de pointPanel
                pointPanel.setPreferredSize(circuitDesignArea.getSize());
                circuitDesignArea.revalidate();
            }
        });
        
        circuitDesignArea.setTransferHandler(new TransferHandler() {
            @Override
            public boolean canImport(TransferHandler.TransferSupport support) {
                return support.isDataFlavorSupported(DataFlavor.stringFlavor);
            }

            @Override
            public boolean importData(TransferHandler.TransferSupport support) {
                if (!canImport(support)) {
                    return false;
                }
                Transferable t = support.getTransferable();
                try {
                    // R√©cup√©rer le nom du composant (ex: "NOT", "OR", "AND", etc.)
                    String componentName = (String) t.getTransferData(DataFlavor.stringFlavor);
                    // R√©cup√©rer la position du drop
                    java.awt.Point dropPoint = support.getDropLocation().getDropPoint();

                    // Cr√©er le composant correspondant
                    AbstractComponent newComponent;
                    switch (componentName) {
                        case "NOT":
                            newComponent = new NOT();
                            
                            break;
                        // case "AND": newComponent = new AndGate(); break;
                        // Ajoutez d'autres cas pour les autres composants
                        default:
                            // Par d√©faut, on peut cr√©er un composant g√©n√©rique
                            newComponent = new NOT();  // ou une classe g√©n√©rique par d√©faut
                            break;
                    }
                    newComponent.setBounds(dropPoint.x, dropPoint.y,
                                           newComponent.getPreferredSize().width,
                                           newComponent.getPreferredSize().height);

                    // Ajouter des √©couteurs pour permettre le d√©placement (comme pr√©c√©demment)
                    newComponent.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mousePressed(MouseEvent e) {
                            newComponent.putClientProperty("offsetX", e.getX());
                            newComponent.putClientProperty("offsetY", e.getY());
                        }
                        @Override
                        public void mouseClicked(MouseEvent e) {
                        	propertiesPanel.updateProperties(newComponent.getX(), newComponent.getY(), newComponent.getComponentName());

                        }
                    });

                    newComponent.addMouseMotionListener(new MouseAdapter() {
                        @Override
                        public void mouseDragged(MouseEvent e) {
                            int offsetX = (int) newComponent.getClientProperty("offsetX");
                            int offsetY = (int) newComponent.getClientProperty("offsetY");

                            int newX = e.getXOnScreen() - circuitDesignArea.getLocationOnScreen().x - offsetX;
                            int newY = e.getYOnScreen() - circuitDesignArea.getLocationOnScreen().y - offsetY;

                            newComponent.setLocation(newX, newY);
                            propertiesPanel.updateProperties(newX, newY, newComponent.getComponentName());
                            circuitDesignArea.revalidate();
                            circuitDesignArea.repaint();
                        }
                    });

                    // Enregistrer dans la HashMap (optionnel pour suivi)
                    composantsMap.put(newComponent, new java.awt.Point(dropPoint.x, dropPoint.y));
                    // Ajouter le composant sur un calque sup√©rieur
                    circuitDesignArea.add(newComponent, Integer.valueOf(2));
                    circuitDesignArea.revalidate();
                    circuitDesignArea.repaint();

                    // Mise √† jour initiale des propri√©t√©s
                    propertiesPanel.updateProperties(dropPoint.x, dropPoint.y, newComponent.getComponentName());

                    return true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return false;
            }
       
        });

    }
    
    /**
     * M√©thode pour r√©cup√©rer l'ic√¥ne associ√©e au composant.
     * Les chemins doivent correspondre √† l'emplacement de vos fichiers images dans votre projet.
     * Toutes les ic√¥nes seront redimensionn√©es √† 64x64 pixels.
     */
    private ImageIcon getComponentIcon(String componentName) {
        ImageIcon icon = null;
        switch(componentName) {
            case "NOT":
                icon = new ImageIcon(getClass().getResource("/icons2/not.png"));
                break;
            case "OR":
                icon = new ImageIcon(getClass().getResource("/icons2/or.png"));
                break;
            case "AND":
                icon = new ImageIcon(getClass().getResource("/icons2/and.png"));
                break;
            case "BUFFER":
                icon = new ImageIcon(getClass().getResource("/icons2/buffer.png"));
                break;
            case "NOR":
                icon = new ImageIcon(getClass().getResource("/icons2/nor.png"));
                break;
            case "XOR":
                icon = new ImageIcon(getClass().getResource("/icons2/xor.png"));
                break;
            case "XNOR":
                icon = new ImageIcon(getClass().getResource("/icons2/xnor.png"));
                break;
            case "NAND":
                icon = new ImageIcon(getClass().getResource("/icons2/nand.png"));
                break;
            case "ODD PARITY":
                icon = new ImageIcon(getClass().getResource("/icons2/odd_parity.png"));
                break;
            case "EVEN PARITY":
                icon = new ImageIcon(getClass().getResource("/icons2/even_parity.png"));
                break;
            case "Multiplexer":
                icon = new ImageIcon(getClass().getResource("/icons2/multiplexer.png"));
                break;
            case "Demultiplexer":
                icon = new ImageIcon(getClass().getResource("/icons2/demultiplexer.png"));
                break;
            case "Decoder":
                icon = new ImageIcon(getClass().getResource("/icons2/decoder.png"));
                break;
            case "Priority Encoder":
                icon = new ImageIcon(getClass().getResource("/icons2/priority_encoder.png"));
                break;
            case "Bit Selector":
                icon = new ImageIcon(getClass().getResource("/icons2/bit_selector.png"));
                break;
            case "D flip flop":
                icon = new ImageIcon(getClass().getResource("/icons2/d_flip_flop.png"));
                break;
            case "T flip flop":
                icon = new ImageIcon(getClass().getResource("/icons2/t_flip_flop.png"));
                break;
            case "JK flip flop":
                icon = new ImageIcon(getClass().getResource("/icons2/jk_flip_flop.png"));
                break;
            case "RS flip flop":
                icon = new ImageIcon(getClass().getResource("/icons2/rs_flip_flop.png"));
                break;
            case "Register":
                icon = new ImageIcon(getClass().getResource("/icons2/register.png"));
                break;
            case "Counter":
                icon = new ImageIcon(getClass().getResource("/icons2/counter.png"));
                break;
            case "RAM":
                icon = new ImageIcon(getClass().getResource("/icons2/ram.png"));
                break;
            case "ROM":
                icon = new ImageIcon(getClass().getResource("/icons2/rom.png"));
                break;
            case "Adder":
                icon = new ImageIcon(getClass().getResource("/icons2/adder.png"));
                break;
            case "Subtractor":
                icon = new ImageIcon(getClass().getResource("/icons2/subtractor.png"));
                break;
            case "Multiplier":
                icon = new ImageIcon(getClass().getResource("/icons2/multiplier.png"));
                break;
            case "Shifter":
                icon = new ImageIcon(getClass().getResource("/icons2/shifter.png"));
                break;
            case "Bit Adder":
                icon = new ImageIcon(getClass().getResource("/icons2/bit_adder.png"));
                break;
            case "Bit Finder":
                icon = new ImageIcon(getClass().getResource("/icons2/bit_finder.png"));
                break;
            case "Comparator":
                icon = new ImageIcon(getClass().getResource("/icons2/comparator.png"));
                break;
            case "Divider":
                icon = new ImageIcon(getClass().getResource("/icons2/divider.png"));
                break;
            case "Negator":
                icon = new ImageIcon(getClass().getResource("/icons2/negator.png"));
                break;
            case "Bin":
                icon = new ImageIcon(getClass().getResource("/icons2/bin.png"));
                break;
            case "Probe":
                icon = new ImageIcon(getClass().getResource("/icons2/probe.png"));
                break;
            case "Tunnel":
                icon = new ImageIcon(getClass().getResource("/icons2/tunnel.png"));
                break;
            case "Clock":
                icon = new ImageIcon(getClass().getResource("/icons2/clock.png"));
                break;
            case "Bus Register":
                icon = new ImageIcon(getClass().getResource("/icons2/bus_register.png"));
                break;
            default:
                icon = new ImageIcon(getClass().getResource("/icons2/default.png"));
                break;
        }
        Image scaledImage = icon.getImage().getScaledInstance(64, 64, Image.SCALE_SMOOTH);
        return new ImageIcon(scaledImage);
    }

    // Cr√©ation de la barre de menu
    public JMenuBar createMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        
        // Menu File
        JMenu mnuFile = new JMenu("File");
        mnuFile.setMnemonic('F');
        
        // MenuItem "New File"
        JMenuItem mnuNewFile = new JMenuItem("New File");
        mnuNewFile.setIcon(new ImageIcon(getClass().getResource("/icons1/new.png")));  
        mnuNewFile.setMnemonic('N');
        mnuNewFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK));
        mnuFile.add(mnuNewFile);
        
        // MenuItem "Open File"
        JMenuItem mnuOpenFile = new JMenuItem("Open File");
        mnuOpenFile.setIcon(new ImageIcon(getClass().getResource("/icons1/open.png")));  
        mnuOpenFile.setMnemonic('O');
        mnuOpenFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK));
        mnuFile.add(mnuOpenFile);
        
        // MenuItem "Save File"
        JMenuItem mnuSaveFile = new JMenuItem("Save File");
        mnuSaveFile.setIcon(new ImageIcon(getClass().getResource("/icons1/save.png")));  
        mnuSaveFile.setMnemonic('S');
        mnuSaveFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK));
        mnuFile.add(mnuSaveFile);
        
        // MenuItem "Exit"
        JMenuItem mnuExitFile = new JMenuItem("Exit");
        mnuExitFile.setIcon(new ImageIcon(getClass().getResource("/icons1/exit.png")));  
        mnuExitFile.setMnemonic('E');
        mnuExitFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK));
        mnuExitFile.addActionListener((e) -> ExitBtn(e));  
        mnuFile.add(mnuExitFile);

        menuBar.add(mnuFile);
        
        return menuBar;
    }
 
    // M√©thode pour fermer l'application
    private void ExitBtn(ActionEvent e) {
        int a = JOptionPane.showConfirmDialog(MainLayout.this, "√ätes-vous s√ªr de vouloir quitter ?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if(a == JOptionPane.YES_OPTION) {
            System.exit(0);  
        }
    }
}
