package projet;

public class TestRandomGenerator {
    public static void main(String[] args) {
        System.out.println("===== TEST DU RANDOM GENERATOR =====");

        // Test avec l'entr√©e True (g√©n√®re des sorties al√©atoires)
        testRandomGenerator(4, new State[]{State.True}, "Test avec activation (True)");

        // Test avec l'entr√©e False (devrait lever une exception)
        testRandomGenerator(4, new State[]{State.False}, "Test avec d√©sactivation (False)");

        // Test avec l'entr√©e ERROR (devrait lever une exception)
        testRandomGenerator(4, new State[]{State.ERROR}, "Test avec erreur (ERROR)");

        // Test avec l'entr√©e UNKNOWN (devrait lever une exception)
        testRandomGenerator(4, new State[]{State.UNKNOWN}, "Test avec entr√©e inconnue (UNKNOWN)");

    }

    public static void testRandomGenerator(int n, State[] inputs, String description) {
        try {
            RandomGenerator generator = new RandomGenerator("RandomGen", n, 0, 0);
            
            // Remplir les entr√©es du g√©n√©rateur
            for (int i = 0; i < inputs.length; i++) {
                generator.inputs.set(i, inputs[i]);
            }

            // Appeler la m√©thode evaluate pour g√©n√©rer les sorties
            generator.evaluate();

            // Afficher le r√©sultat
            System.out.println("\nüü¢ " + description);
            System.out.print("Sorties g√©n√©r√©es : ");
            for (State s : generator.outputs) {
                System.out.print(s + " ");
            }
            System.out.println();

        } catch (IllegalStateException e) {
            // G√©rer les exceptions et afficher les messages d'erreur
            System.out.println("\nüî¥ " + description + " - Erreur : " + e.getMessage());
        }
    }
}

